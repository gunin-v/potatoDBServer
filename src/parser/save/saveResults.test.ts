import { PrismaClient } from "@prisma/client";
import logger from "../../logger";
import type { Product } from "../types";
import { saveProducts } from "./saveResults";

jest.mock("@prisma/client", () => {
  const mPrismaClient = {
    product: {
      create: jest.fn(),
    },
  };
  return { PrismaClient: jest.fn(() => mPrismaClient) };
});
jest.mock("../../logger");

describe("saveProducts", () => {
  const products: Product[] = [
    { name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", price: 100, store: "–ú–∞–≥–Ω–∏—Ç" },
    { name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", price: 90, store: "–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫" },
  ];

  let prismaMock: PrismaClient;

  beforeEach(() => {
    prismaMock = new PrismaClient();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", async () => {
    await saveProducts(products);

    expect(prismaMock.product.create).toHaveBeenCalledTimes(products.length);
    products.forEach((product, index) => {
      expect(prismaMock.product.create).toHaveBeenNthCalledWith(index + 1, {
        data: product,
      });
    });

    expect(logger.info).toHaveBeenCalledWith(
      "üî• –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    );
  });

  it("–¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", async () => {
    const error = new Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
    (prismaMock.product.create as jest.Mock).mockRejectedValueOnce(error);

    await expect(saveProducts(products)).rejects.toThrow(error);

    expect(prismaMock.product.create).toHaveBeenCalledTimes(1);
    expect(logger.error).toHaveBeenCalledWith(
      "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É: ",
      error
    );
  });
});
