import type { Page } from "puppeteer";
import logger from "../../logger";
import { filterPotatoes } from "../helpers";
import type { Product } from "../types";

export const parseMagnet = async (page: Page): Promise<Product[]> => {
  logger.info("üõí [–ú–∞–≥–Ω–∏—Ç] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...");
  await page.goto(
    "https://magnit.ru/search?term=%D0%BA%D0%B0%D1%80%D1%82%D0%BE%D1%88%D0%BA%D0%B0"
  );

  // –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  await page.waitForSelector(".unit-catalog-product-preview-description");

  const products: Product[] = await page.evaluate(() => {
    const productElements = document.querySelectorAll(
      ".unit-catalog-product-preview-description"
    );

    return Array.from(productElements).map((el) => {
      const nameElement = el.querySelector(
        ".unit-catalog-product-preview-title"
      );
      const pricePerKgElement = el.querySelector(
        ".unit-catalog-product-preview-weighted span"
      );
      const priceElement = el.querySelector(
        ".unit-catalog-product-preview-prices__regular span"
      );
      const weightElement = el.querySelector(
        ".unit-catalog-product-preview-unit-value"
      );

      let name = nameElement?.textContent?.trim() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç";
      let price = Number.parseFloat(
        (pricePerKgElement || priceElement)?.textContent
          ?.replace("‚ÇΩ", "")
          .replace(",", ".")
          .trim() || "0"
      );

      // –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      price = Math.round(price * 100) / 100;

      const weightText = weightElement?.textContent?.trim() || "1–∫–≥";
      const weightMatch = weightText.match(/(\d+)(–∫–≥|–≥)/);

      if (weightMatch) {
        const weight = Number.parseFloat(weightMatch[1]);
        const unit = weightMatch[2];

        if (unit === "–∫–≥" && weight !== 1) {
          name += `(${weight}–∫–≥)`; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—Ñ–∏–∫—Å —Å –≤–µ—Å–æ–º –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
        }
      }

      return { name, price, store: "–ú–∞–≥–Ω–∏—Ç" };
    });
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ø—Ä–æ—Å—Ç–æ –∫–∞—Ä—Ç–æ—à–∫—É"
  const filteredProducts = filterPotatoes(products);

  logger.info("üõí [–ú–∞–≥–Ω–∏—Ç] –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω");
  logger.info(JSON.stringify(filteredProducts));

  return filteredProducts;
};
