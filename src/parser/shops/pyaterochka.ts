import type { Page } from "playwright";
import logger from "../../logger";
import { filterPotatoes } from "../helpers";
import type { Product } from "../types";

export const parsePyaterochka = async (page: Page): Promise<Product[]> => {
  logger.info("üõí [–ü—è—Ç–µ—Ä–æ—á–∫–∞] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...");

  await page.goto("https://5ka.ru/");

  // –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç "–∫–∞—Ä—Ç–æ—à–∫–∞"
  await page.waitForSelector('input[placeholder="–ü–æ–∏—Å–∫"]');
  await page.type('input[placeholder="–ü–æ–∏—Å–∫"]', "–∫–∞—Ä—Ç–æ—à–∫–∞");

  // –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å id "search-menu"
  await page.waitForSelector("#search-menu", { state: "visible" });

  // –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å"
  await page.waitForFunction(
    () =>
      Array.from(document.querySelectorAll("#search-menu .chakra-link")).some(
        (el) => el.textContent?.includes("–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å")
      ),
    { timeout: 5000 }
  );

  const products: Product[] = await page.evaluate(() => {
    const productElements = document.querySelectorAll(
      "#search-menu .chakra-link"
    );

    return Array.from(productElements).map((el) => {
      const nameElement = el.querySelector("div:nth-child(2) > p:nth-child(2)");
      const sizeElement = el.querySelector("div:nth-child(2) > p:nth-child(3)");
      const priceContainer = el.querySelector("div:nth-child(3)");
      const priceRubElement = priceContainer?.querySelector(
        "div:first-child > p:nth-child(1)"
      );
      const priceKopElement = priceContainer?.querySelector(
        "div:first-child > p:nth-child(2)"
      );

      const name = nameElement?.textContent?.trim() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç";
      const sizeText = sizeElement?.textContent?.trim() || "1 –∫–≥";
      let price = Number.parseFloat(
        `${priceRubElement?.textContent?.trim() || "0"}.${
          priceKopElement?.textContent?.trim() || "00"
        }`
      );

      let discountPrice = null;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∫–∏–¥–∫–∏
      if (priceContainer?.children.length === 2) {
        const oldPriceRubElement = priceContainer.querySelector(
          "div:nth-child(1) > p:nth-child(2)"
        );
        const oldPriceKopElement = priceContainer.querySelector(
          "div:nth-child(1) > p:nth-child(3)"
        );
        const discountPriceRubElement = priceContainer.querySelector(
          "div:nth-child(2) > p:nth-child(1)"
        );
        const discountPriceKopElement = priceContainer.querySelector(
          "div:nth-child(2) > p:nth-child(2)"
        );

        if (discountPriceRubElement && discountPriceKopElement) {
          discountPrice = Number.parseFloat(
            `${discountPriceRubElement.textContent?.trim() || "0"}.${
              discountPriceKopElement.textContent?.trim() || "00"
            }`
          );
        }

        if (oldPriceRubElement && oldPriceKopElement) {
          price = Number.parseFloat(
            `${oldPriceRubElement.textContent?.trim() || "0"}.${
              oldPriceKopElement.textContent?.trim() || "00"
            }`
          );
        }
      }

      const sizeMatch = sizeText.match(/(\d+,\d+|\d+\.\d+|\d+)\s?(–∫–≥|–≥)/);
      if (sizeMatch) {
        const size = Number.parseFloat(sizeMatch[1].replace(",", "."));
        const unit = sizeMatch[2];

        if (unit === "–≥") {
          price = (price / size) * 1000; // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ü–µ–Ω—É –∑–∞ –≥—Ä–∞–º–º –≤ —Ü–µ–Ω—É –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º
          if (discountPrice) {
            discountPrice = (discountPrice / size) * 1000;
          }
        } else if (unit === "–∫–≥") {
          price = price / size; // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ü–µ–Ω—É –∑–∞ —É–ø–∞–∫–æ–≤–∫—É –≤ —Ü–µ–Ω—É –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º
          if (discountPrice) {
            discountPrice = discountPrice / size;
          }
        }
      }

      // –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      price = Math.round(price * 100) / 100;

      if (discountPrice) {
        discountPrice = Math.round(discountPrice * 100) / 100;
      }

      return { name, price, discountPrice, store: "–ü—è—Ç–µ—Ä–æ—á–∫–∞" };
    });
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ø—Ä–æ—Å—Ç–æ –∫–∞—Ä—Ç–æ—à–∫—É"
  const filteredProducts = filterPotatoes(products);

  logger.info("üõí [–ü—è—Ç–µ—Ä–æ—á–∫–∞] –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω");
  logger.info(JSON.stringify(filteredProducts));

  return filteredProducts;
};
