import type { Page } from "playwright";
import logger from "../../logger";
import { filterPotatoes } from "../helpers";
import type { Product } from "../types";

export const parseVkusvill = async (page: Page): Promise<Product[]> => {
  logger.info("üõí [–í–∫—É—Å–í–∏–ª–ª] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...");

  await page.goto(
    "https://vkusvill.ru/search/?type=products&q=%D0%BA%D0%B0%D1%80%D1%82%D0%BE%D1%84%D0%B5%D0%BB%D1%8C"
  );

  // –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  await page.waitForSelector(".ProductCard__content", { state: "visible" });

  const products: Product[] = await page.evaluate(() => {
    const productElements = document.querySelectorAll(".ProductCard__content");

    return Array.from(productElements).map((el) => {
      const nameElement = el.querySelector(".ProductCard__link");
      const priceElement = el.querySelector(
        ".ProductCard__price .Price--label"
      );
      const sizeElement = el.querySelector(".ProductCard__weight");

      const name = nameElement?.textContent?.trim() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç";
      let price = 0;

      if (sizeElement) {
        console.log(`Processing sizeElement for ${name}`);
        // –ï—Å–ª–∏ –µ—Å—Ç—å sizeElement, –∑–Ω–∞—á–∏—Ç —Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ —É–ø–∞–∫–æ–≤–∫—É
        price = Number.parseFloat(
          priceElement?.textContent
            ?.replace("‚ÇΩ", "")
            .replace(",", ".")
            .trim() || "0"
        );

        const sizeText = sizeElement.textContent?.trim() || "1–∫–≥";
        const sizeMatch = sizeText.match(/(\d+,\d+|\d+)\s?(–∫–≥|–≥—Ä)/);

        if (sizeMatch) {
          const size = Number.parseFloat(sizeMatch[1].replace(",", "."));
          const unit = sizeMatch[2];

          if (unit === "–≥—Ä") {
            price = (price / size) * 1000; // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ü–µ–Ω—É –∑–∞ –≥—Ä–∞–º–º –≤ —Ü–µ–Ω—É –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º
          } else if (unit === "–∫–≥") {
            price = price / size; // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ü–µ–Ω—É –∑–∞ —É–ø–∞–∫–æ–≤–∫—É –≤ —Ü–µ–Ω—É –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º
          }
        }
      } else {
        console.log(`Processing pricePerKg for ${name}`);
        // –ï—Å–ª–∏ sizeElement –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º
        price = Number.parseFloat(
          priceElement?.textContent
            ?.replace("‚ÇΩ/–∫–≥", "")
            .replace(",", ".")
            .trim() || "0"
        );
      }

      // –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      price = Math.round(price * 100) / 100;

      return { name, price, store: "–í–∫—É—Å–í–∏–ª–ª" };
    });
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ø—Ä–æ—Å—Ç–æ –∫–∞—Ä—Ç–æ—à–∫—É"
  const filteredProducts = filterPotatoes(products);

  logger.info("üõí [–í–∫—É—Å–í–∏–ª–ª] –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω");
  logger.info(JSON.stringify(filteredProducts));

  return filteredProducts;
};
