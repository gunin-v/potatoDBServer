import type { Page } from "playwright";
import logger from "../../logger";
import { filterPotatoes } from "../helpers";
import type { Product } from "../types";

export const parseLenta = async (page: Page): Promise<Product[]> => {
  logger.info("üõí [–õ–µ–Ω—Ç–∞] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...");

  await page.goto(
    "https://lenta.com/search/%D0%BA%D0%B0%D1%80%D1%82%D0%BE%D1%88%D0%BA%D0%B0/"
  );

  // –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  await page.waitForSelector(".product-card_middle-content", {
    state: "visible",
  });

  const products: Product[] = await page.evaluate(() => {
    const productElements = document.querySelectorAll(
      ".product-card_middle-content"
    );

    return Array.from(productElements)
      .map((el) => {
        const nameElement = el.querySelector(".card-name_content");
        const priceElement = el.querySelector(".main-price");
        const oldPriceElement = el.querySelector(".old-price > span");
        const priceTypeElement = el.querySelector(".price");

        const name = nameElement?.textContent?.trim() || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç";
        let price = 0;
        let discountPrice = null;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏ –∫–æ–ø–µ–π–∫–∏
        const priceText = priceElement?.textContent?.replace(/\s/g, "").trim();
        if (priceText) {
          price = Number.parseFloat(priceText.replace(",", "."));
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞, –±–µ—Ä–µ–º —Ü–µ–Ω—É –∏–∑ old-price
        if (priceElement?.classList.contains("__accent") && oldPriceElement) {
          const oldPriceText = oldPriceElement.textContent
            ?.replace(/\s/g, "")
            .trim();
          if (oldPriceText) {
            discountPrice = price;
            price = Number.parseFloat(oldPriceText.replace(",", "."));
          }
        }

        const priceType = priceTypeElement?.textContent?.trim() || "";
        if (priceType !== "–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥") {
          return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç—Å—è –Ω–µ –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º
        }

        // –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        price = Math.round(price * 100) / 100;

        if (discountPrice) {
          discountPrice = Math.round(discountPrice * 100) / 100;
        }

        return { name, price, discountPrice, store: "–õ–µ–Ω—Ç–∞" };
      })
      .filter((product) => product !== null) as Product[];
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ø—Ä–æ—Å—Ç–æ –∫–∞—Ä—Ç–æ—à–∫—É"
  const filteredProducts = filterPotatoes(products);

  logger.info("üõí [–õ–µ–Ω—Ç–∞] –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω");
  logger.info(JSON.stringify(filteredProducts));

  return filteredProducts;
};
